import { useState } from 'react';

interface QuizQuestion {
  id: string;
  question: string;
  options: {
    id: string;
    text: string;
    isCorrect: boolean;
  }[];
  explanation: string;
  emoji: string;
}

const quizQuestions: QuizQuestion[] = [
  {
    id: 'q1',
    question: 'O que voc√™ aprendeu sobre S√≠ndrome de Down?',
    emoji: '‚òÄÔ∏è',
    options: [
      {
        id: 'a',
        text: 'Uma condi√ß√£o gen√©tica que acontece quando uma pessoa nasce com um cromossomo extra. Isso faz com que ela se desenvolva de forma um pouco diferente, mas ainda pode ter uma vida feliz e cheia de conquistas!',
        isCorrect: true
      },
      {
        id: 'b',
        text: '√â uma doen√ßa que s√≥ afeta adultos muito idosos',
        isCorrect: false
      },
      {
        id: 'c',
        text: '√â algo que pode ser "pego" de outras pessoas',
        isCorrect: false
      },
      {
        id: 'd',
        text: 'N√£o √© uma condi√ß√£o real, apenas imagina√ß√£o',
        isCorrect: false
      }
    ],
    explanation: 'Muito bem! A S√≠ndrome de Down √© uma condi√ß√£o gen√©tica que faz as pessoas se desenvolverem de forma especial, mas elas podem ter vidas muito felizes e cheias de amor!'
  },
  {
    id: 'q2',
    question: 'Qual √© uma caracter√≠stica do Transtorno do Espectro Autista?',
    emoji: 'üåà',
    options: [
      {
        id: 'a',
        text: 'Pessoas com autismo n√£o conseguem aprender nada',
        isCorrect: false
      },
      {
        id: 'b',
        text: 'Cada pessoa com autismo √© √∫nica e pode ter talentos especiais!',
        isCorrect: true
      },
      {
        id: 'c',
        text: 'Todas as pessoas com autismo s√£o exatamente iguais',
        isCorrect: false
      },
      {
        id: 'd',
        text: '√â algo que passa com o tempo',
        isCorrect: false
      }
    ],
    explanation: 'Perfeito! Pessoas com autismo s√£o √∫nicas e podem ter talentos incr√≠veis em matem√°tica, arte, m√∫sica e muito mais!'
  },
  {
    id: 'q3',
    question: 'Por que pessoas com S√≠ndrome de Williams s√£o especiais?',
    emoji: 'üéµ',
    options: [
      {
        id: 'a',
        text: 'Elas n√£o gostam de fazer amigos',
        isCorrect: false
      },
      {
        id: 'b',
        text: 'Elas s√£o muito t√≠midas e quietas',
        isCorrect: false
      },
      {
        id: 'c',
        text: 'Elas s√£o super amig√°veis e adoram m√∫sica!',
        isCorrect: true
      },
      {
        id: 'd',
        text: 'Elas n√£o conseguem aprender m√∫sica',
        isCorrect: false
      }
    ],
    explanation: 'Isso mesmo! Pessoas com S√≠ndrome de Williams s√£o conhecidas por serem muito carinhosas e terem uma mem√≥ria incr√≠vel para m√∫sica!'
  }
];

interface QuizProps {
  onBack: () => void;
}

const Quiz = ({ onBack }: QuizProps) => {
  const [currentQuestion, setCurrentQuestion] = useState(0);
  const [selectedAnswer, setSelectedAnswer] = useState<string | null>(null);
  const [showExplanation, setShowExplanation] = useState(false);
  const [score, setScore] = useState(0);
  const [quizCompleted, setQuizCompleted] = useState(false);

  const question = quizQuestions[currentQuestion];

  const handleAnswerSelect = (optionId: string) => {
    if (showExplanation) return;
    
    setSelectedAnswer(optionId);
    const selectedOption = question.options.find(opt => opt.id === optionId);
    
    if (selectedOption?.isCorrect) {
      setScore(score + 1);
    }
    
    setShowExplanation(true);
  };

  const handleNext = () => {
    if (currentQuestion < quizQuestions.length - 1) {
      setCurrentQuestion(currentQuestion + 1);
      setSelectedAnswer(null);
      setShowExplanation(false);
    } else {
      setQuizCompleted(true);
    }
  };

  const resetQuiz = () => {
    setCurrentQuestion(0);
    setSelectedAnswer(null);
    setShowExplanation(false);
    setScore(0);
    setQuizCompleted(false);
  };

  if (quizCompleted) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-purple-500 via-pink-500 to-purple-600 p-4">
        <div className="max-w-2xl mx-auto">
          <button 
            onClick={onBack}
            className="mb-6 px-4 py-2 bg-white bg-opacity-20 text-white rounded-full font-body hover:bg-opacity-30 transition-all"
          >
            ‚Üê Voltar ao Menu
          </button>
          
          <div className="bg-white rounded-3xl p-8 text-center shadow-lg">
            <div className="text-6xl mb-6">üéâ</div>
            <h2 className="text-3xl font-heading font-bold text-gray-800 mb-4">
              Parab√©ns! Quiz Conclu√≠do!
            </h2>
            
            <div className="text-2xl font-bold text-purple-600 mb-6">
              Sua pontua√ß√£o: {score} de {quizQuestions.length}
            </div>
            
            <div className="mb-6">
              {score === quizQuestions.length && (
                <div className="text-lg text-green-600 font-medium">
                  üåü Perfeito! Voc√™ entendeu tudo sobre as diferen√ßas! üåü
                </div>
              )}
              {score >= quizQuestions.length / 2 && score < quizQuestions.length && (
                <div className="text-lg text-blue-600 font-medium">
                  üëè Muito bem! Voc√™ est√° aprendendo sobre as diferen√ßas!
                </div>
              )}
              {score < quizQuestions.length / 2 && (
                <div className="text-lg text-orange-600 font-medium">
                  üí™ Continue aprendendo! Cada diferen√ßa √© especial!
                </div>
              )}
            </div>
            
            <div className="flex flex-col sm:flex-row gap-4 justify-center">
              <button 
                onClick={resetQuiz}
                className="px-6 py-3 bg-purple-500 text-white rounded-full font-body font-medium hover:bg-purple-600 transition-all"
              >
                üîÑ Jogar Novamente
              </button>
              <button 
                onClick={onBack}
                className="px-6 py-3 bg-pink-500 text-white rounded-full font-body font-medium hover:bg-pink-600 transition-all"
              >
                üè† Voltar ao Menu
              </button>
            </div>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-purple-500 via-pink-500 to-purple-600 p-4">
      <div className="max-w-2xl mx-auto">
        <button 
          onClick={onBack}
          className="mb-6 px-4 py-2 bg-white bg-opacity-20 text-white rounded-full font-body hover:bg-opacity-30 transition-all"
        >
          ‚Üê Voltar ao Menu
        </button>
        
        {/* Progress Bar */}
        <div className="bg-pink-600 rounded-full p-4 mb-6 text-white">
          <div className="flex justify-between items-center mb-2">
            <span className="font-body font-medium">Pergunta {currentQuestion + 1} de {quizQuestions.length}</span>
            <span className="font-body font-medium">Pontua√ß√£o: {score}</span>
          </div>
          <div className="bg-pink-700 rounded-full h-2">
            <div 
              className="bg-white h-2 rounded-full transition-all duration-300"
              style={{ width: `${((currentQuestion + 1) / quizQuestions.length) * 100}%` }}
            ></div>
          </div>
        </div>

        {/* Question Card */}
        <div className="bg-white rounded-3xl p-8 shadow-lg">
          <div className="text-center mb-8">
            <div className="text-4xl mb-4">{question.emoji}</div>
            <h2 className="text-2xl font-heading font-bold text-gray-800 mb-4">
              {question.question}
            </h2>
          </div>

          {/* Options */}
          <div className="space-y-4 mb-8">
            {question.options.map((option) => {
              let bgColor = 'bg-gray-50 hover:bg-gray-100';
              
              if (showExplanation && selectedAnswer === option.id) {
                bgColor = option.isCorrect ? 'bg-green-100 border-green-400' : 'bg-red-100 border-red-400';
              } else if (showExplanation && option.isCorrect) {
                bgColor = 'bg-green-100 border-green-400';
              }

              return (
                <button
                  key={option.id}
                  onClick={() => handleAnswerSelect(option.id)}
                  className={`w-full p-4 text-left rounded-xl border-2 border-gray-200 ${bgColor} transition-all font-body`}
                  disabled={showExplanation}
                >
                  <div className="flex items-start space-x-3">
                    <span className="font-bold text-purple-600 text-lg">
                      {option.id.toUpperCase()}
                    </span>
                    <span className="text-gray-800 leading-relaxed">
                      {option.text}
                    </span>
                  </div>
                </button>
              );
            })}
          </div>

          {/* Explanation */}
          {showExplanation && (
            <div className="bg-blue-50 border border-blue-200 rounded-xl p-4 mb-6">
              <div className="flex items-start space-x-3">
                <span className="text-2xl">üí°</span>
                <div>
                  <h3 className="font-semibold text-blue-800 mb-2">Explica√ß√£o:</h3>
                  <p className="text-blue-700 font-body leading-relaxed">
                    {question.explanation}
                  </p>
                </div>
              </div>
            </div>
          )}

          {/* Next Button */}
          {showExplanation && (
            <div className="text-center">
              <button 
                onClick={handleNext}
                className="px-8 py-3 bg-purple-500 text-white rounded-full font-body font-medium text-lg hover:bg-purple-600 transition-all transform hover:scale-105"
              >
                {currentQuestion < quizQuestions.length - 1 ? 'Pr√≥xima Pergunta ‚Üí' : 'Ver Resultado üéâ'}
              </button>
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

export default Quiz;